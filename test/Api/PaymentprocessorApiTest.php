<?php
/**
 * PaymentprocessorApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  GeminiCommerce\Paymentprocessor
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Processor Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace GeminiCommerce\Paymentprocessor\Test\Api;

use \GeminiCommerce\Paymentprocessor\Configuration;
use \GeminiCommerce\Paymentprocessor\ApiException;
use \GeminiCommerce\Paymentprocessor\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * PaymentprocessorApiTest Class Doc Comment
 *
 * @category Class
 * @package  GeminiCommerce\Paymentprocessor
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentprocessorApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for authorizePayment
     *
     * Authorize Payment.
     *
     */
    public function testAuthorizePayment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createPaymentMethod
     *
     * Create Payment Method.
     *
     */
    public function testCreatePaymentMethod()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for finalizePayment
     *
     * Finalize Payment.
     *
     */
    public function testFinalizePayment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAvailablePaymentMethod
     *
     * Get Available Payment Method.
     *
     */
    public function testGetAvailablePaymentMethod()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPaymentMethod
     *
     * Get Payment Method.
     *
     */
    public function testGetPaymentMethod()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPaymentMethodConfiguration
     *
     * Get Payment Method Configuration.
     *
     */
    public function testGetPaymentMethodConfiguration()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for initPayment
     *
     * Init Payment.
     *
     */
    public function testInitPayment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listAvailablePaymentMethods
     *
     * List Available Payment Methods.
     *
     */
    public function testListAvailablePaymentMethods()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listPaymentMethods
     *
     * List Payment Methods.
     *
     */
    public function testListPaymentMethods()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for performPayment
     *
     * Perform Payment.
     *
     */
    public function testPerformPayment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for performRefund
     *
     * Perform Refund.
     *
     */
    public function testPerformRefund()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePayment
     *
     * Update Payment.
     *
     */
    public function testUpdatePayment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePaymentMethod
     *
     * Update Payment Method.
     *
     */
    public function testUpdatePaymentMethod()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for voidPayment
     *
     * Void Payment.
     *
     */
    public function testVoidPayment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
